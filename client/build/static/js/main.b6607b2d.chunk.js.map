{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/googleBooksApi.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","ADD_USER","gql","USER_LOGIN","ADD_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","useMutation","addBook","error","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","userId","getProfile","data","_id","link","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_USER","SavedBooks","userData","setUserData","userDataLength","Object","keys","useQuery","loading","removeBook","user","getUserData","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","addUser","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6607b2d.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import gql from \"graphql-tag\";\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $email: String!, $password: String!) {\n        addUser(username: $username, email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const USER_LOGIN = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_BOOK = gql`\n    mutation addBook(\n        $userId: ID!\n        $authors: [String]!\n        $description: String!\n        $bookId: String!\n        $image: String!\n        $link: String!\n        $title: String!\n    ) {\n        addBook(\n            userId: $userId\n            authors: $authors\n            description: $description\n            bookId: $bookId\n            image: $image\n            link: $link\n            title: $title\n        ) {\n            _id\n            username\n            email\n            savedBooks {\n                authors\n                description\n                image\n                link\n                title\n                bookId\n            }\n        }\n    }\n`;\n\nexport const REMOVE_BOOK = gql`\n    mutation removeBook($userId: String!, $bookId: String!) {\n        removeBook(userId: $userId, bookId: $bookId) {\n            _id\n            username\n            email\n            savedBooks {\n                authors\n                description\n                image\n                link\n                title\n                bookId\n            }\n        }\n    }\n`;","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/googleBooksApi\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_BOOK } from \"../utils/mutations\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const [addBook, { error }] = useMutation(ADD_BOOK);\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    //STILL NEED TO GET USER ID!!!!!!!!!!!!!!!!!!\n    try {\n      await addBook({\n        variables: {\n          userId: Auth.getProfile().data._id,\n          authors: bookToSave.authors,\n          description: bookToSave.description,\n          bookId: bookToSave.bookId,\n          image: bookToSave.image,\n          link: bookToSave.link || \"\",\n          title: bookToSave.title,\n        },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_USERS = gql`\n    query Query {\n        users {\n            _id\n            username\n            email\n            password\n            savedBooks {\n                authors\n                description\n                bookId\n                image\n                link\n                title\n            }\n        }\n    }\n`;\n\nexport const GET_USER = gql`\n    query Query($userId: ID!) {\n        user(userId: $userId) {\n            _id\n            username\n            email\n            password\n            savedBooks {\n                authors\n                description\n                bookId\n                image\n                link\n                title\n            }\n        }\n    }\n`;","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\nimport { GET_USER } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const userDataLength = Object.keys(userData).length;\n  const { loading, error, data } = useQuery(GET_USER, {\n    variables: { userId: Auth.getProfile().data._id },\n  });\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n        if (!token) {\n          return false;\n        }\n        setUserData(data?.user || []);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getUserData();\n  });\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const response = await removeBook({\n        variables: {\n          userId: Auth.getProfile().data._id,\n          bookId: bookId,\n        },\n      });\n      if (!response) {\n        throw new Error(\"Something went wrong.\");\n      }\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  //add user to db via graphql\n  const [addUser, { error }] = useMutation(ADD_USER);\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { USER_LOGIN } from \"../utils/mutations\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error }] = useMutation(USER_LOGIN);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: \"/graphql\",\n    cache: new InMemoryCache(),\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <>\n                    <Navbar />\n                    <Switch>\n                        <Route exact path=\"/\" component={SearchBooks} />\n                        <Route exact path=\"/saved\" component={SavedBooks} />\n                        <Route\n                            render={() => (\n                                <h1 className=\"display-2\">Wrong page!</h1>\n                            )}\n                        />\n                    </Switch>\n                </>\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;","\n   \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}